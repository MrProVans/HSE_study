import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

class Elevator {
    private final int id;
    private int currentFloor = 0;
    private boolean moving = false;

    public Elevator(int id) {
        this.id = id;
    }

    public int getId() {
        return id;
    }

    public int getCurrentFloor() {
        return currentFloor;
    }

    public boolean isMoving() {
        return moving;
    }

    public void moveTo(int targetFloor) {
        if (currentFloor == targetFloor) {
            System.out.println("[–õ–∏—Ñ—Ç " + id + "] ‚ö†Ô∏è –£–∂–µ –Ω–∞ —ç—Ç–∞–∂–µ " + targetFloor + ", –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è");
            return;
        }

        System.out.println("[–õ–∏—Ñ—Ç " + id + "] ‚è≥ –î–≤–∏–∂–µ—Ç—Å—è –∫ —ç—Ç–∞–∂—É " + targetFloor);
        moving = true;

        try {
            Thread.sleep(1000); // –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ª–∏—Ñ—Ç–∞
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        currentFloor = targetFloor;
        moving = false;
        System.out.println("[–õ–∏—Ñ—Ç " + id + "] ‚úÖ –ü—Ä–∏–±—ã–ª –Ω–∞ —ç—Ç–∞–∂ " + targetFloor);
    }
}

class Dispatcher {
    private final Map<Integer, Queue<Integer>> requests = new HashMap<>();

    public Dispatcher(List<Elevator> elevators) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ñ—Ç–∞
        for (Elevator elevator : elevators) {
            requests.put(elevator.getId(), new ConcurrentLinkedQueue<>());
        }
    }

    public void addRequest(int floor, Elevator elevator) {
        Queue<Integer> elevatorQueue = requests.get(elevator.getId());

        if (!elevatorQueue.contains(floor)) {
            elevatorQueue.offer(floor);
            System.out.println("[–î–∏—Å–ø–µ—Ç—á–µ—Ä] üì° –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–∞–∂ " + floor + " –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –ª–∏—Ñ—Ç—É " + elevator.getId());
        } else {
            System.out.println("[–î–∏—Å–ø–µ—Ç—á–µ—Ä] ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–∞–∂ " + floor + " —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏—Ñ—Ç–∞ " + elevator.getId());
        }
    }

    public Integer getNextRequest(Elevator elevator) {
        Queue<Integer> elevatorQueue = requests.get(elevator.getId());
        return elevatorQueue.poll();
    }
}

class RequestGenerator {
    private final Random random = new Random();
    private final Set<Integer> activeRequests = new HashSet<>();
    private final int maxFloor;

    public RequestGenerator(int maxFloor) {
        this.maxFloor = maxFloor;
    }

    public void generateRequest(Dispatcher dispatcher, List<Elevator> elevators) {
        int floor = random.nextInt(maxFloor + 1);

        if (!activeRequests.contains(floor)) {
            activeRequests.add(floor);
            Elevator elevator = selectOptimalElevator(elevators, floor);
            System.out.println("[–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤] üìû –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–∞–∂ " + floor);
            dispatcher.addRequest(floor, elevator);
        } else {
            System.out.println("[–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤] ‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–∞–∂ " + floor + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
    }

    private Elevator selectOptimalElevator(List<Elevator> elevators, int targetFloor) {
        return elevators.stream()
                .min(Comparator.comparingInt(elevator -> Math.abs(elevator.getCurrentFloor() - targetFloor)))
                .orElseThrow(() -> new IllegalStateException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—Ñ—Ç–æ–≤"));
    }
}

public class ElevatorSystem {
    public static void main(String[] args) {
        List<Elevator> elevators = List.of(new Elevator(0), new Elevator(1));
        Dispatcher dispatcher = new Dispatcher(elevators);
        RequestGenerator generator = new RequestGenerator(10); // –ú–∞–∫—Å. —ç—Ç–∞–∂–∏: 0-10

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏
        new Thread(() -> {
            for (int i = 0; i < 20; i++) { // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 20 –∑–∞–ø—Ä–æ—Å–æ–≤
                generator.generateRequest(dispatcher, elevators);
                try {
                    Thread.sleep(2000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        }).start();

        while (true) {
            for (Elevator elevator : elevators) {
                Integer nextFloor = dispatcher.getNextRequest(elevator);
                if (nextFloor != null) {
                    elevator.moveTo(nextFloor);
                }
            }
            try {
                Thread.sleep(1000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}